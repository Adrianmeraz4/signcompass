<meta http-equiv="Access-Control-Allow-Origin" content="https://github.com/Adrianmeraz4/signcompass/" />
<style>
    div {
        width: 500px;
        height: 400px;
        border: 2px solid black;
        position: relative;
    }
 
    video {
        object-fit: cover;
    }
    
    canvas {
        object-fit: cover;
    }
</style>
<div>
    
</div>
<br />
<button id="but" onclick="addTrainingData(0, 1);" autoplay>
    Start Training
</button>
<canvas id="canvas" width="100" height="100" crossorigin="anonymous"></canvas>
<p id="jsonT" ></p>
<img src="train/c/1.png"width="200" height="200">

<script src="https://cdn.rawgit.com/BrainJS/brain.js/45ce6ffc/browser.js"></script>
<script>

// video to watch
// https://www.youtube.com/watch?v=6E6XecoTRVo&t=166s

// bran.js documentation
// https://github.com/BrainJS/brain.js#brainjs

// asl video
// https://www.youtube.com/watch?v=8AjjnovEPKk

let canvas = document.querySelector("canvas");
let ctx = canvas.getContext("2d");

// Create a Neural Network
const net = new brain.NeuralNetwork({
    activation: 'sigmoid',
    //hiddenLayers: [200, 100, 50],
    hiddenLayers: [20, 10, 5],
    learningRate: 0.1
});

const trainingData = [
  /*{input: [0, 0], output: [0] },
  {input: [0, 1], output: [1] },
  {input: [1, 0], output: [1] },
  {input: [1, 1], output: [0] }*/
];

var outmode = [
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
];
var amountTrains = 0;

function indexOfMax(arr) {
    if (arr.length === 0) {
        return -1;
    }

    var max = arr[0];
    var maxIndex = 0;

    for (var i = 1; i < arr.length; i++) {
        if (arr[i] > max) {
            maxIndex = i;
            max = arr[i];
        }
    }

    return maxIndex;
}

const chooseRandom = (arr, num = 1) => {
   const res = [];
   for(let i = 0; i < num; ){
      const random = Math.floor(Math.random() * arr.length);
      if(res.indexOf(arr[random]) !== -1){
         continue;
      };
      res.push(arr[random]);
      i++;
   };
   return res;
};


function addCanvasData() 
{
  ctx = canvas.getContext("2d");
  
  var imgd = ctx.getImageData(0, 0, canvas.width, canvas.height);
  var pix = imgd.data;
  var currentGrays = [];
  for (var i = 0, n = pix.length; i < n; i += 4) {
    let avg = Math.round((pix[i] + pix[i + 1] + pix[i + 2]) / 3.0);
    //alert(avg);
    pix[i  ] = avg; // red
    pix[i+1] = avg; // green
    pix[i+2] = avg; // blue
    currentGrays.push(avg);
  }
  ctx.putImageData(imgd, 0, 0);
  //alert(currentGrays);
  trainingData.push({input: currentGrays, output: outmode.slice() });
  //alert(trainingData[amountTrains].input);
  //alert(trainingData[amountTrains].output);
  amountTrains = amountTrains + 1;
  canLoadNew = true;
}

function loadImg(imgFile) 
{
  let tempImg = document.createElement("img");
  tempImg.width = "100";
  tempImg.height = "100";
  tempImg.crossorigin = "anonymous";
  tempImg.src = imgFile;
  tempImg.id = "imy"
  
  document.body.appendChild(tempImg);
  
  var image = new Image();
 image.src = imgFile;
 
 // when the image has loaded, set the src property of the img element to the
 
 // url of the image
 image.onload = function() {
    tempImg.src = imgFile;
 
  
  
  tempImg.onload = function () {
    let img2 = document.getElementById("imy");
  /*
    let tempCanv = document.createElement("canvas");
    tempCanv.width = "100";
    tempCanv.height = "100";
    tempCanv.id = "loadcanv";
    document.body.appendChild(tempCanv); */
    ctx.drawImage(tempImg, 0, 0, canvas.width, canvas.height);
    addCanvasData();
    tempImg.remove();
  };
  };
}

var timeoutTime = 50;
var trainingImgs = [
// a b c d e
5, 2, 2, 3, 2,
// f g h i j
2, 2, 2, 2, 1,
// k l m n o
2, 2, 2, 2, 2,
// p q r s t
2, 2, 2, 2, 2,
// u v w x y z
2, 2, 2, 2, 2, 1
];
var numLetters = 26;
var canLoadNew = true;
var numBatches = 10;


function finishedLoad(i) 
{
  if (i != numBatches) {
    let batch = chooseRandom(trainingData, 16);
    console.log("batch");
    console.log(batch);
    net.train(batch, {
      // Defaults values --> expected validation
      iterations: 5, // the maximum times to iterate the training data --> number greater than 0
      errorThresh: 0.005, // the acceptable error percentage from training data --> number between 0 and 1
      log: true, // true to use console.log, when a function is supplied it is used --> Either true or a function
      logPeriod: 5, // iterations between logging out --> number greater than 0
      learningRate: 0.3, // scales with delta to effect training rate --> number between 0 and 1
      momentum: 0.1, // scales with next layer's change value --> number between 0 and 1
    });
    finishedLoad(i + 1);
  } else 
  {
    console.log("Guessing third image, which is B");
    console.log(trainingData[4].output);
    var guess = net.run(trainingData[4].input);
    console.log(guess);
    var numGuess = indexOfMax(guess);
    console.log("That letter is: " + String.fromCharCode(97 + numGuess));
    
    const json = net.toJSON();
    document.getElementById("jsonT").innerHTML = JSON.stringify(json);
  }
}

function waiter(i, j, end)
{
  if (canLoadNew) {
    if (end) {
      console.log("Training Data");
      console.log(trainingData);
      finishedLoad(0);
    } else 
    {
      setTimeout(function() {
            addTrainingData(i, j);
        }, timeoutTime);
    }
  } else {
    setTimeout(function() {
          waiter(i, j);
      }, timeoutTime);
  }
}

function addTrainingData(i, j)
{
  //console.log("called");
  console.log("i: " + i + " j: " + j);
  if (i < numLetters) {
    console.log("pass 1");
    if (j <= trainingImgs[i]) 
    {
      canLoadNew = false;
      outmode[i] = 1;
      //console.log(outmode);
      var loc = "https://github.com/Adrianmeraz4/signcompass/blob/main/trainData/a/1.png?raw=true";
      //var loc = "https://github.com/Adrianmeraz4/signcompass/blob/main/trainData/" + String.fromCharCode(97 + i) + "/" + j + ".png?raw=true";
      loadImg(loc);
      console.log(loc);
      setTimeout(function() {
          waiter(i + 0, j + 1, false);
      }, timeoutTime);
    } else {
      outmode[i] = 0;
      setTimeout(function() {
         addTrainingData(i + 1, 1, false);
      }, timeoutTime);
    }
  } else {
    //console.log(trainingData);
    waiter(i, j, true);
  }
  
}

/*
for (var i = 0; i < numLetters; i++) {
  for (var j = 1; j <= trainingImgs[i]; j++) {
    var loc = "train/" + String.fromCharCode(97 + i) + "/" + j + ".png";
    loadImg(loc);
  }
}
*/



//loadImg("train/a/2.png");

/*
const json = net.toJSON();
net.fromJSON(json);
*/


/*
net.train(trainingData, {
  // Defaults values --> expected validation
  iterations: 20000, // the maximum times to iterate the training data --> number greater than 0
  errorThresh: 0.005, // the acceptable error percentage from training data --> number between 0 and 1
  log: true, // true to use console.log, when a function is supplied it is used --> Either true or a function
  logPeriod: 1000, // iterations between logging out --> number greater than 0
  learningRate: 0.3, // scales with delta to effect training rate --> number between 0 and 1
  momentum: 0.1, // scales with next layer's change value --> number between 0 and 1
});

console.log(net.run([0, 0]));
*/
</script>
