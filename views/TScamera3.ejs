<head>
<style>
.button {
  display: inline-block;
  padding: 15px 25px;
  font-size: 24px;
  cursor: pointer;
  text-align: center;
  text-decoration: none;
  outline: none;
  color: #fff;
  background-color: #4CAF50;
  border: none;
  border-radius: 15px;
  box-shadow: 0 9px #999;
}

.button:hover {background-color: #3e8e41}

.button:active {
  background-color: #3e8e41;
  box-shadow: 0 5px #666;
  transform: translateY(4px);
}

.button2 {
  display: inline-block;
  padding: 15px 25px;
  font-size: 24px;
  cursor: pointer;
  text-align: center;
  text-decoration: none;
  outline: none;
  color: #fff;
  background-color: #3399ff;
  border: none;
  border-radius: 15px;
  box-shadow: 0 9px #999;
}

.button2:hover {background-color: #0073e6}

.button2:active {
  background-color: #0073e6;
  box-shadow: 0 5px #666;
  transform: translateY(4px);
}
</style>
<script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@latest"> </script>
</head>
<div style="text-align: center;">
<h1 id="loading">Loading Neural Network</h1>
<div id="butHolder">
<h1 id="timer"></h1>
<button id="but" autoplay class="button" style="display: none">
    Open WebCam
</button>
</div>

<div>
    <video id="vid" width="400" height="400" ></video>
    <h1 id="instructText" style="color:Tomato;"></h1>
    <h1 id="testText"></h1>
</div>

</div>
<br>

<canvas id="canvas" width="100" height="100" ></canvas>

<script>

// was used for testing purposes
var isTesting = false;

// // used for the starting loading animation
var loadingAnimation = 1;

// this function searches for the highest value in an array
// and returns the index
// (may be depracated)
function indexOfMax(arr) {
    if (arr.length === 0) {
        return -1;
    }

    var max = arr[0];
    var maxIndex = 0;

    for (var i = 1; i < arr.length; i++) {
        if (arr[i] > max) {
            maxIndex = i;
            max = arr[i];
        }
    }

    return maxIndex;
}

// sorts the list but returns the indexes of the sorted items
function sortWithIndeces(toSort) {
  for (var i = 0; i < toSort.length; i++) {
    toSort[i] = [toSort[i], i];
  }
  toSort.sort(function(left, right) {
    return left[0] < right[0] ? -1 : 1;
  });
  toSort.sortIndices = [];
  for (var j = 0; j < toSort.length; j++) {
    toSort.sortIndices.push(toSort[j][1]);
    toSort[j] = toSort[j][0];
  }
  return toSort;
}

// utilies the ?t in the url to determine
// which sign the NN should be looking for
// (0 is A, 2 is C, etc)
const urlParams = new URLSearchParams(window.location.search);
var searchLetter = urlParams.get("t");

// used to edit the canvas
const canvas = document.querySelector("canvas");
const ctx = canvas.getContext("2d");

// gets some of the elements
var testText = document.getElementById("testText")
var instructText = document.getElementById("instructText")
var loadingText = document.getElementById("loading")
var timerText = document.getElementById("timer")
let but = document.getElementById("but");

// a list to store Neural Networks
var models = [];

// used to temporarily store a NN
var tempmodel;

// number of NN's
var numModels;

// function for the loading animation
// will add dots to the onscreen text
// so the User doesn't get bored
function loadingAnim() {
  if (loadingAnimation != -1) {
    console.log("ayo");
    loadingText.innerHTML = "Loading Neural Network"
    var temp = loadingAnimation + 0;
    while (temp != 0) {
      temp--;
      loadingText.innerHTML += ".";
    }
    loadingAnimation++;
    if (loadingAnimation == 4) {
      loadingAnimation = 1;
    }
    setTimeout(function() {
            loadingAnim();
        }, 500);
  } else {
    loadingText.remove();
  }
}

async function main() 
{
  if (isTesting) {
  
  } else {
    // loads all the NN's and puts them into the models list
    tempmodel = await tf.loadLayersModel('https://raw.githubusercontent.com/Adrianmeraz4/signcompass/main/AImodels/TSmodel69.json');
    models.push(tempmodel);
    tempmodel = await tf.loadLayersModel('https://raw.githubusercontent.com/Adrianmeraz4/signcompass/main/AImodels/TSmode70.json');
    models.push(tempmodel);
    tempmodel = await tf.loadLayersModel('https://raw.githubusercontent.com/Adrianmeraz4/signcompass/main/AImodels/TSmodel3.json');
    models.push(tempmodel);
    tempmodel = await tf.loadLayersModel('https://raw.githubusercontent.com/Adrianmeraz4/signcompass/main/AImodels/TSmodel4.json');
    models.push(tempmodel);
    tempmodel = await tf.loadLayersModel('https://raw.githubusercontent.com/Adrianmeraz4/signcompass/main/AImodels/TSmodel6.json');
    models.push(tempmodel);
    
    
    numModels = models.length;
    console.log(models);
  }
  // ends the loading animation
  loadingAnimation = -1;
  but.style = "display: block; text-align: center;";
}

loadingAnim();
main();

var Json;


var doMath = false;

    // load the camera
    document.addEventListener("DOMContentLoaded", () => {


        let video = document.getElementById("vid");
        let mediaDevices = navigator.mediaDevices;
        vid.muted = true;
        // button to open the webcam
        but.addEventListener("click", () => {
          
          but.remove();
          // removes that last button then 
          // then creates a new button to take screenshots
          const butHolder = document.getElementById("butHolder");
          const newBut = document.createElement("button");
          newBut.classList.add("button2");
          instructText.innerHTML = "Make the letter: " + String.fromCharCode(65 + Number(searchLetter) );
          newBut.innerHTML = "Check Answer"
          newBut.onclick = newButton;
          butHolder.appendChild(newBut);
          
            // Accessing the user camera and video.
            mediaDevices
                .getUserMedia({
                    video: true,
                    audio: true,
                })
                .then((stream) => {
 
                    // This will make sure a loop that the
                    // step function is called every frame
                    video.srcObject = stream;
                    video.addEventListener("loadedmetadata", () => {
                        video.play();
                        function step() {
                          // only does stuff when doMath is true
                          if (doMath) {
                          doMath = false;

                          // puts the camera video onto the canvas
                          // (allows easy way to turn images into usable data)
                          ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
                          var imgd = ctx.getImageData(0, 0, canvas.width, canvas.height);

                          // pix is now an array of pixel data [0] is red, [1] is blue, [2] is green
                          // [3] is alpha, [4] is next red ... repeat
                          var pix = imgd.data;
                          // 0-4 is RGBA - assume 5 is next pixel
                          

                          // Converts each pixel to grayscale
                          var currentGrays = [];
                          for (var i = 0, n = pix.length; i < n; i += 4) {
                              let avg = Math.round((pix[i] + pix[i + 1] + pix[i + 2]) / 3.0);
                              
                              currentGrays.push(avg);
                          }

                          // this what the NNs will predict
                          var predictionData = tf.tensor([currentGrays]);

                          // all the weights of every letter (26 letters)
                          var totalPredictions = [];
                          
                          var k = 0;
                          while (k < 26) {
                            totalPredictions.push(0);
                            k++;
                          }
                          console.log(totalPredictions);

                          // gets the prediction of all models
                          // and adds them together to get
                          // the average result
                          for (k = 0; k < numModels; k++) 
                          {
                            var prediction = models[k].predict(predictionData ).dataSync();
                            console.log(prediction);
                            var j = 0;
                            while (j < 26) {
                              totalPredictions[j] += prediction[j] * prediction[j];
                              j++;
                            }
                          }
                          
                          
                          console.log("totalPredictions: ");
                          console.log(totalPredictions.slice());

                          // sorts each letter prediction (highest prediction values first)
                          sortWithIndeces(totalPredictions);

                          // gets the index of the letter that it wants to look for
                          var position = totalPredictions.sortIndices.indexOf(Number(searchLetter));
                          
                          console.log(totalPredictions.sortIndices.join(","));
                          console.log(position);

                          // calculates the percentage of how "correct"
                          // the guess is
                          // (a 96% looks better than a wrong answer)
                          testText.innerHTML = "Percentage of accuracy: " + ( (1 - position / 26.0) * 100);
                          
                          
                          }
                          
                          requestAnimationFrame(step);
                          
                        }
                        requestAnimationFrame(step);
                    });
                })
                .catch(alert);
        });
    });

// makes a nice 5 second countdown
// so the User can get ready
function timerAnimation(ti) {
  if (ti != 0) {
  timerText.innerHTML = ti;
  setTimeout(function() {
      timerAnimation(ti - 1);
  }, 1000);
  } else {
    timerText.innerHTML = "";
    doMath = true;
  }
}

function newButton() {
  timerAnimation(5);
}

</script>
